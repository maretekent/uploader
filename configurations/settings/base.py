"""
Django settings for lms project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import structlog
from distutils.util import strtobool

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
PROJECT_DIR = os.path.dirname(BASE_DIR)
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
ENV_NAME = os.environ.get("ENV_NAME", "development")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'lrqui%46&e50fuh92_mpj@52#d=8nm&a7*=7795zu9y5--h7ge'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(strtobool(os.environ.get("DEBUG", "True")))

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "rest_framework",
    "app_dir.authentication",
    "app_dir.portal",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'configurations.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'configurations.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_L10N = True

USE_TZ = True

BASE_URL = os.environ.get("BASE_URL", "https://localhost:8090")
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = os.environ.get("STATIC_URL", "/static/")
DEFAULT_STATIC_ROOT = os.path.abspath(os.path.join(PROJECT_DIR, "static"))
STATIC_ROOT = os.environ.get("STATIC_ROOT", DEFAULT_STATIC_ROOT)
STATICFILES_DIRS = (
    os.path.abspath(
        os.path.join(PROJECT_DIR, "node_modules/material-components-web/dist")
    ),
    os.path.abspath(
        os.path.join(PROJECT_DIR, "node_modules/material-design-icons/iconfont")
    ),
    os.path.abspath(os.path.join(PROJECT_DIR, "node_modules/pdfjs-dist/build")),
    os.path.abspath(os.path.join(PROJECT_DIR, "node_modules/materialize-css/dist")),
    os.path.abspath(os.path.join(PROJECT_DIR, "node_modules/jquery/dist")),
    os.path.abspath(os.path.join(PROJECT_DIR, "node_modules/react-day-picker/lib")),
)
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.abspath(os.path.join(PROJECT_DIR, "/media"))

# Logging configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {"environment": {"()": "app_dir.CustomFilter"}},
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
            "filters": ["environment"],
        },
    },
    "formatters": {
        "verbose": {
            "format": "%(asctime)s %(levelname)s module=%(module)s, "
            "process_id=%(process)d, path=%(pathname)s, "
            "environment=%(environment)s, line=%(lineno)d, "
            "%(message)s"
        }
    },
    "loggers": {
        "django.request": {"handlers": ["console"], "level": "ERROR"},
        "utils": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "celery": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": True,
        },
        "app_dir": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

if ENV_NAME == "development":
    LOGGING["loggers"]["django.request"]["handlers"] = ["console"]
    LOGGING["loggers"]["django.request"]["level"] = "DEBUG"
    LOGGING["loggers"]["celery"]["level"] = "INFO"
    LOGGING["loggers"]["celery"]["handlers"] = ["console"]
    LOGGING["loggers"]["utils"]["level"] = "DEBUG"
    LOGGING["loggers"]["app_dir"]["level"] = "DEBUG"
    # add function name and line numbers to enhance debugging
    LOGGING["formatters"]["verbose"][
        "format"
    ] += " funcName=%(funcName)s, lineNumber=%(lineno)d \n"
    LOGGING["handlers"]["console"]["level"] = "DEBUG"


def configure_structlog(environment):
    structlog_processors = [
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="%Y-%m-%d %H:%M:%S"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
    ]

    if environment == "development":
        structlog_processors.append(structlog.dev.ConsoleRenderer())
    else:
        structlog_processors.append(structlog.processors.JSONRenderer())

    # this formatter should come last
    structlog_processors.append(structlog.stdlib.ProcessorFormatter.wrap_for_formatter)

    structlog.configure(
        processors=structlog_processors,
        logger_factory=structlog.stdlib.LoggerFactory(),
        cache_logger_on_first_use=True,
    )


# Authentication
AUTHENTICATION_LAST_ACCESS_TIMESTAMP_SESSION_KEY = "last_access_timestamp"
AUTHENTICATION_IDLE_TIMEOUT_IN_SECONDS = 3600
# Auth errors
AUTHENTICATION_EMAIL_IS_REQUIRED = "Email address is required"
AUTHENTICATION_PASSWORD_IS_REQUIRED = "Password is required"
AUTHENTICATION_NEW_PASSWORD_IS_REQUIRED = "New Password is required"
AUTHENTICATION_CONFIRMATION_PASSWORD_IS_REQUIRED = "Please confirm your new password"
AUTHENTICATION_INVALID_LOGIN = "Invalid login"
